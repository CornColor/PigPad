package browser.pig.cn.pigpad.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import browser.pig.cn.pigpad.bean.StepABean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STEP_ABEAN".
*/
public class StepABeanDao extends AbstractDao<StepABean, Long> {

    public static final String TABLENAME = "STEP_ABEAN";

    /**
     * Properties of entity StepABean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Step_id = new Property(1, String.class, "step_id", false, "STEP_ID");
        public final static Property Product_id = new Property(2, String.class, "product_id", false, "PRODUCT_ID");
        public final static Property Step_num = new Property(3, String.class, "step_num", false, "STEP_NUM");
        public final static Property Step_text = new Property(4, String.class, "step_text", false, "STEP_TEXT");
        public final static Property Step_img = new Property(5, String.class, "step_img", false, "STEP_IMG");
        public final static Property Step_voice = new Property(6, String.class, "step_voice", false, "STEP_VOICE");
        public final static Property Product_name = new Property(7, String.class, "product_name", false, "PRODUCT_NAME");
        public final static Property Product_video = new Property(8, String.class, "product_video", false, "PRODUCT_VIDEO");
        public final static Property Remarks = new Property(9, String.class, "remarks", false, "REMARKS");
    };


    public StepABeanDao(DaoConfig config) {
        super(config);
    }
    
    public StepABeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STEP_ABEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STEP_ID\" TEXT," + // 1: step_id
                "\"PRODUCT_ID\" TEXT," + // 2: product_id
                "\"STEP_NUM\" TEXT," + // 3: step_num
                "\"STEP_TEXT\" TEXT," + // 4: step_text
                "\"STEP_IMG\" TEXT," + // 5: step_img
                "\"STEP_VOICE\" TEXT," + // 6: step_voice
                "\"PRODUCT_NAME\" TEXT," + // 7: product_name
                "\"PRODUCT_VIDEO\" TEXT," + // 8: product_video
                "\"REMARKS\" TEXT);"); // 9: remarks
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STEP_ABEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StepABean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String step_id = entity.getStep_id();
        if (step_id != null) {
            stmt.bindString(2, step_id);
        }
 
        String product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindString(3, product_id);
        }
 
        String step_num = entity.getStep_num();
        if (step_num != null) {
            stmt.bindString(4, step_num);
        }
 
        String step_text = entity.getStep_text();
        if (step_text != null) {
            stmt.bindString(5, step_text);
        }
 
        String step_img = entity.getStep_img();
        if (step_img != null) {
            stmt.bindString(6, step_img);
        }
 
        String step_voice = entity.getStep_voice();
        if (step_voice != null) {
            stmt.bindString(7, step_voice);
        }
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(8, product_name);
        }
 
        String product_video = entity.getProduct_video();
        if (product_video != null) {
            stmt.bindString(9, product_video);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(10, remarks);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StepABean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String step_id = entity.getStep_id();
        if (step_id != null) {
            stmt.bindString(2, step_id);
        }
 
        String product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindString(3, product_id);
        }
 
        String step_num = entity.getStep_num();
        if (step_num != null) {
            stmt.bindString(4, step_num);
        }
 
        String step_text = entity.getStep_text();
        if (step_text != null) {
            stmt.bindString(5, step_text);
        }
 
        String step_img = entity.getStep_img();
        if (step_img != null) {
            stmt.bindString(6, step_img);
        }
 
        String step_voice = entity.getStep_voice();
        if (step_voice != null) {
            stmt.bindString(7, step_voice);
        }
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(8, product_name);
        }
 
        String product_video = entity.getProduct_video();
        if (product_video != null) {
            stmt.bindString(9, product_video);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(10, remarks);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StepABean readEntity(Cursor cursor, int offset) {
        StepABean entity = new StepABean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // step_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // product_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // step_num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // step_text
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // step_img
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // step_voice
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // product_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // product_video
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // remarks
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StepABean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStep_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProduct_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStep_num(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStep_text(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStep_img(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStep_voice(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProduct_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProduct_video(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemarks(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StepABean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StepABean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
