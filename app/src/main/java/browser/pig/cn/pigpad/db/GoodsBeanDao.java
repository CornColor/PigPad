package browser.pig.cn.pigpad.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import browser.pig.cn.pigpad.bean.GoodsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_BEAN".
*/
public class GoodsBeanDao extends AbstractDao<GoodsBean, Long> {

    public static final String TABLENAME = "GOODS_BEAN";

    /**
     * Properties of entity GoodsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Product_id = new Property(1, String.class, "product_id", false, "PRODUCT_ID");
        public final static Property Product_name = new Property(2, String.class, "product_name", false, "PRODUCT_NAME");
        public final static Property Product_video = new Property(3, String.class, "product_video", false, "PRODUCT_VIDEO");
        public final static Property Remarks = new Property(4, String.class, "remarks", false, "REMARKS");
        public final static Property Product_icon = new Property(5, String.class, "product_icon", false, "PRODUCT_ICON");
        public final static Property IsSelect = new Property(6, boolean.class, "isSelect", false, "IS_SELECT");
        public final static Property IsHidLine = new Property(7, boolean.class, "isHidLine", false, "IS_HID_LINE");
        public final static Property Iffullscreen = new Property(8, String.class, "iffullscreen", false, "IFFULLSCREEN");
        public final static Property Fullscreen_Interval = new Property(9, String.class, "fullscreen_Interval", false, "FULLSCREEN__INTERVAL");
        public final static Property Cycleindex = new Property(10, String.class, "cycleindex", false, "CYCLEINDEX");
        public final static Property Product_updatecode = new Property(11, String.class, "product_updatecode", false, "PRODUCT_UPDATECODE");
    };


    public GoodsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRODUCT_ID\" TEXT," + // 1: product_id
                "\"PRODUCT_NAME\" TEXT," + // 2: product_name
                "\"PRODUCT_VIDEO\" TEXT," + // 3: product_video
                "\"REMARKS\" TEXT," + // 4: remarks
                "\"PRODUCT_ICON\" TEXT," + // 5: product_icon
                "\"IS_SELECT\" INTEGER NOT NULL ," + // 6: isSelect
                "\"IS_HID_LINE\" INTEGER NOT NULL ," + // 7: isHidLine
                "\"IFFULLSCREEN\" TEXT," + // 8: iffullscreen
                "\"FULLSCREEN__INTERVAL\" TEXT," + // 9: fullscreen_Interval
                "\"CYCLEINDEX\" TEXT," + // 10: cycleindex
                "\"PRODUCT_UPDATECODE\" TEXT);"); // 11: product_updatecode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindString(2, product_id);
        }
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(3, product_name);
        }
 
        String product_video = entity.getProduct_video();
        if (product_video != null) {
            stmt.bindString(4, product_video);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(5, remarks);
        }
 
        String product_icon = entity.getProduct_icon();
        if (product_icon != null) {
            stmt.bindString(6, product_icon);
        }
        stmt.bindLong(7, entity.getIsSelect() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsHidLine() ? 1L: 0L);
 
        String iffullscreen = entity.getIffullscreen();
        if (iffullscreen != null) {
            stmt.bindString(9, iffullscreen);
        }
 
        String fullscreen_Interval = entity.getFullscreen_Interval();
        if (fullscreen_Interval != null) {
            stmt.bindString(10, fullscreen_Interval);
        }
 
        String cycleindex = entity.getCycleindex();
        if (cycleindex != null) {
            stmt.bindString(11, cycleindex);
        }
 
        String product_updatecode = entity.getProduct_updatecode();
        if (product_updatecode != null) {
            stmt.bindString(12, product_updatecode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindString(2, product_id);
        }
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(3, product_name);
        }
 
        String product_video = entity.getProduct_video();
        if (product_video != null) {
            stmt.bindString(4, product_video);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(5, remarks);
        }
 
        String product_icon = entity.getProduct_icon();
        if (product_icon != null) {
            stmt.bindString(6, product_icon);
        }
        stmt.bindLong(7, entity.getIsSelect() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsHidLine() ? 1L: 0L);
 
        String iffullscreen = entity.getIffullscreen();
        if (iffullscreen != null) {
            stmt.bindString(9, iffullscreen);
        }
 
        String fullscreen_Interval = entity.getFullscreen_Interval();
        if (fullscreen_Interval != null) {
            stmt.bindString(10, fullscreen_Interval);
        }
 
        String cycleindex = entity.getCycleindex();
        if (cycleindex != null) {
            stmt.bindString(11, cycleindex);
        }
 
        String product_updatecode = entity.getProduct_updatecode();
        if (product_updatecode != null) {
            stmt.bindString(12, product_updatecode);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GoodsBean readEntity(Cursor cursor, int offset) {
        GoodsBean entity = new GoodsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // product_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // product_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // product_video
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remarks
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // product_icon
            cursor.getShort(offset + 6) != 0, // isSelect
            cursor.getShort(offset + 7) != 0, // isHidLine
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // iffullscreen
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fullscreen_Interval
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // cycleindex
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // product_updatecode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodsBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProduct_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProduct_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProduct_video(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemarks(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProduct_icon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsSelect(cursor.getShort(offset + 6) != 0);
        entity.setIsHidLine(cursor.getShort(offset + 7) != 0);
        entity.setIffullscreen(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFullscreen_Interval(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCycleindex(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProduct_updatecode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodsBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodsBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
